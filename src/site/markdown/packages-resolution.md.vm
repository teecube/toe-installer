#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')

$h2 Automatic packages resolution

${toeDisplayedName} - ${toeDisplayedInstallerName} has a state-of-the-art
system to resolve automatically the required *TIBCO installation packages* for
all its installation [goals](./plugin-info.html).

It can retrieve the installation packages:

* from a local directory with a zero-configuration approach, based on the
naming convention of the TIBCO installation packages
* from a Maven repository (local or remote) where the TIBCO installation
packages have neen [installed](#Install) or [deployed](#Deploy) before

It's a prerequisites to create a
[full environment installation](./environments.html) configuration and
to install seamlessly complex TIBCO installations.

<div class="well" style="padding-top: 12px;">
	<h4><span class="fa fa-lightbulb-o"></span> What is a TIBCO installation
package ?</h4> 

A TIBCO installation package is a zipped file containing a TIBCO product to be
installed and its installation program. For instance:<br/>
<blockquote style="margin: 15px;"><em>TIB_</em><span class="color-highlight"><strong>BW</strong></span>_<strong>6.4.0</strong><span>_</span><em>win_x86_64</em><u>.zip</u></blockquote>
is the installation package for TIBCO
<span class="color-highlight"><strong>B</strong></span>usiness
<span class="color-highlight"><strong>W</strong></span>orks
version <strong>6.4.0</strong>
for <em>Win</em>dows platform <span> on a <em>x86_64</em> architecture</span>.
<br />
Notice that these installation packages filenames are always prefixed by
<em>TIB_</em> and suffixed by the <u>.zip</u> file extension, that they contain
a short name of the product, the version and the system/architecture.
</div>

$h3 Example

For following explanations, we consider a directory */tmp/packages* filled with
4 TIBCO installation packages as follows:

${installTIBCOPackageToMaven_sample}

$h3 Local resolving (in the filesystem)

Local resolution looks for TIBCO installation packages in a filesystem directory
based on the official naming convention.
The default location is the current directory where this Maven plugin is run: 
_${basedir}_.

To display the resolved packages in the current directory, run: 

${displayLocalTIBCOPackage_command}

$h3 Remote resolving (via Maven)

Remote resolution is based on
[Maven dependency mechanism](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html).
It requires that the **TIBCO installation packages are available in a Maven
repository**. It does not matter whether the Maven repository is remote or local
even though this resolution method is called remote as opposed to 
[local resolution](#Local_resolving_in_the_filesystem) which is based on simple
local directories only.

${toeDisplayedName} - ${toeDisplayedInstallerName} provides the goals to
<a href="./packages-install-mojo.html">install</a> or
<a href="./packages-deploy-mojo.html">deploy</a> TIBCO installation packages to
Maven repositories.

$h4 Install

In */tmp/packages* directory, a simple command will install all TIBCO
installation packages found in this directory to the Maven local repository:

${installTIBCOPackageToMaven_command}

$h4 Deploy

To deploy to a remote Maven repository, the credentials of the repository must
also be set in the Maven settings.xml:

${deployTIBCOPackageToMaven_conf}

Then, a simple command will deploy all TIBCO installation packages found in
the */tmp/packages* directory to the Maven remote repository:

${deployTIBCOPackageToMaven_command}

---

$h2 Resolution policies

<ul class="fa-ul">
  <li><span class="fa-li fa fa-plug"></span> <a href="#Local">local resolving</a></li>
  <li><span class="fa-li fa fa-plug"></span> <a href="#Remote">remote resolving</a></li>
</ul>